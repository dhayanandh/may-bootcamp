name: class12 image build

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'class12/app/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: 879381241087
  APP_NAME: app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service:
          - name: flask
            dockerfile: class12/app/Dockerfile
            context: class12/app
          - name: nginx
            dockerfile: class12/app/nginx/Dockerfile
            context: class12/app/nginx
          - name: redis
            dockerfile: class12/app/redis/Dockerfile
            context: class12/app/redis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-${{ env.APP_NAME }}-${{ matrix.service.name }}
          IMAGE_TAG:  latest 
          # ${{ github.sha }}
        run: |
          echo "Building and pushing ${{ matrix.service.name }} image..."
          
          # Build and push with commit SHA tag
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --file ${{ matrix.service.dockerfile }} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            ${{ matrix.service.context }}
          
          echo "Successfully pushed ${{ matrix.service.name }} image to $ECR_REGISTRY/$ECR_REPOSITORY"

      # - name: Image scan results
      #   continue-on-error: true
      #   run: |
      #     aws ecr describe-image-scan-findings \
      #       --repository-name ${{ env.ENVIRONMENT }}-${{ env.APP_NAME }}-${{ matrix.service.name }} \
      #       --image-id imageTag=${{ github.sha }} \
      #       --region ${{ env.AWS_REGION }} || echo "Scan not available yet"

  deploy-notification:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "✅ All images successfully built and pushed to ECR"
            echo "Environment: ${{ env.ENVIRONMENT || 'dev' }}"
            echo "Commit SHA: ${{ github.sha }}"
          else
            echo "❌ Build and push failed"
            exit 1
          fi