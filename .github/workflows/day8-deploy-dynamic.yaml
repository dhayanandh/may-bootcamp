name: "Dev App Build, Test and Release"

on:
  workflow_dispatch:

env:
  environment: "dev"
  region: "ap-south-1"
  secret: "student-portal-deploy-data"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Fetch secrets from AWS Secrets Manager
        id: fetch-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,${{ env.environment }}-${{ env.secret }}
          parse-json-secrets: true

      - name: Print GITHUB_ENV
        run: cat $GITHUB_ENV 

      - name: test env names
        run: |
         echo ${{ env.IMAGE_REPO_NAME }}
         echo ${{ env.ECS_CLUSTER }}

      # - name: Build docker container
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: "{{defaultContext}}:class6/src"
      #     tags: ${{ github.sha }}
      #     build-args: APP_VERSION=${{ github.sha }}
      #     push: false

      - name: build docker image
        run: |
          cd class6/src
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to Amazon ECR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          ECR_IMAGE: ${{ env.IMAGE_REPO_NAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_IMAGE:latest
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_IMAGE:$IMAGE_TAG
          docker push $ECR_IMAGE --all-tags

      - name: Download task definition for web
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
          ls -l task-definition.json

      - name: Fill in the new image ID for web in the Amazon ECS task definition
        if: ${{ github.ref == 'refs/heads/main' }}
        id: task-def-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_APP_CONTAINER_NAME }}
          image: ${{ env.IMAGE_REPO_NAME }}:latest

      - name: Deploy app on Amazon ECS task definition
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-web.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true