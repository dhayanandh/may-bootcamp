# .github/workflows/deploy-to-k8s.yml
name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main ]  # Trigger on main branch
    paths:
      - 'class19/src/**'  # Only trigger when source code changes
  workflow_dispatch:  # Allow manual trigger from GitHub Actions UI

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: may-flask
  ECR_REGISTRY: 879381241087.dkr.ecr.ap-south-1.amazonaws.com

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the source code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use PAT for authentication

    # Setup Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Generate image tag based on git commit
    - name: Generate image tag
      id: image-tag
      run: |
        # Use branch name and short commit SHA for tagging
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        SHORT_SHA=${GITHUB_SHA::8}
        
        if [ "$BRANCH_NAME" = "main" ]; then
          IMAGE_TAG="v$(date +%Y%m%d)-${SHORT_SHA}"
        else
          IMAGE_TAG="${BRANCH_NAME}-${SHORT_SHA}"
        fi
        
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "Generated image tag: ${IMAGE_TAG}"

    # Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./class19/src
        file: ./class19/src/Dockerfile
        platforms: linux/amd64,linux/arm64  # Support both architectures
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.image_tag }}
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Update ArgoCD manifests
    - name: Update ArgoCD configuration
      if: success()
      run: |
        # Configure git with PAT for authentication
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Set up authentication using the PAT
        git remote set-url origin https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Fetch and checkout the correct ArgoCD branch
        git fetch origin argo-class19:argo-class19 || {
          echo "Branch argo-class19 not found, creating it..."
          git checkout -b argo-class19
          git push origin argo-class19
          git fetch origin argo-class19:argo-class19
        }
        git checkout argo-class19
        
        # Update the image tag in the deployment file
        IMAGE_TAG="${{ steps.image-tag.outputs.image_tag }}"
        FULL_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
        
        # Update the deployment file
        sed -i "s|image: .*|image: ${FULL_IMAGE}|g" class19/k8s/app.yaml
        
        # Commit and push changes
        git add class19/k8s/app.yaml
        git commit -m "Update image tag to ${IMAGE_TAG} from commit ${{ github.sha }}" || exit 0
        git push origin argo-class19

    # Create deployment summary
    - name: Deployment Summary
      if: success()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Image Tag** | \`${{ steps.image-tag.outputs.image_tag }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Full Image** | \`${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.image_tag }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch** | \`${{ steps.image-tag.outputs.branch_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **ArgoCD Branch** | \`argo-class19\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Image built and pushed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "✅ ArgoCD configuration updated on argo-class19 branch!" >> $GITHUB_STEP_SUMMARY

    # Notify deployment status
    - name: Deployment notification
      if: failure()
      run: |
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "The deployment process encountered an error. Please check the logs above." >> $GITHUB_STEP_SUMMARY
