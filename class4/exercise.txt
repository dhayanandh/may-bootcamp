# deploying containerised flask app on aws with AWS UI

## Basic Network setup
step1: Create a vpc with cidr block 10.0.0.0/16
step2: create 2 private subnet (10.0.1.0/24, 10.0.2.0/24) and 2 public subnet (10.0.3.0/24, 10.0.4.0/24)
step3: Create private and public  route tables and associate subnet to respective route tables
step4: Create 1 internet gateway and attach it to vpc
step5: create public route -> from anywhere to internet gateway
step5: Create 2 nat gateway, 1 for each public subnet
step6: Create private route from everywhere to nat gateway for outbound 

## Security group setup
step1: 1 security group for alb -> inbound on port 80 and 443 (http and https) from everywhere
step2: 1 security group for flask app (inbound on port 8000 as we run the app in this port) from alb securty group
step3: 1 security group for rds -> inbound on port 5432 from flask app security group

## rds
step1: create 2 private subnets for rds with cidr (10.0.5.0/24, 10.0.6.0/24)
step2: create a postgres rds -> no public visibility, give db name and user and password
step3: Note down the details like db endpoint, username, password, db name, port

# Create a ecr repo
step1: create the ecr repo 
step2: note down the detailss
step3: build the ecr login command

## containerise the app 
step1:  setup the flask app, dockerfile, etc
step2: write a github action to build and push the image to ecr
step3: configure the secrets and build the image, ecr login and push to repo

## ECS deployment
step1: create a ecs cluster
step2: create a task definition  with the flask image, a cloud watch log group, ecs execution role(that has access to ecr)
step3: create an ecs service using private subnet  pubic ip disabled, ecs security group
step4: associate an alb while creating the ecs service that has a http listener on port 8000(as per the app) and target group
step5: access the app using load baancer dns

## DNS 
step1: register a domain
step2: create public dns zone
step3: create a route from the domain(or subdomain) to load balancer using alias config
step4: test accessing the app with domain
### ssl config
step6: create a certificate with aws acm
step7: Do the certificate validation with the domain
step8: create a https listener 
step9: access the app on domain name on https 






## Cleanup
1. delete the ecs cluster, it will delete all resources. 
2. delete rds instance
3. delete nat gateway 
4. detach elastic ips
5. delete Network